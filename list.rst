
comprehension
-------------

- :左箭头表示属于: **[x*2 | x <- [1..10]]**     
- **[2,4,6,8,10,12,14,16,18,20]**  

- :逗号表示与: [x * 2 | x <- [1..10], x * 2 >= 12]
- **[12,14,16,18,20]**

- :反引号表示中缀: [ x | x <- [50..100], x `mod` 7 == 3]
- **[52,59,66,73,80,87,94]**

- :/=表示不等于: [ x | x <- [10..20], x /= 13, x /= 15, x /= 19]  
- **[10,11,12,14,16,17,18,20]**


- :两个集合会取笛卡尔积: [ x*y | x <- [2,5,10], y <- [8,10,11]]  
- **[16,20,22,40,50,55,80,100,110]**


- 下面是个递归的
    
    ::
        
        ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]  
        ghci> [ [ x | x <- xs, even x ] | xs <- xxs]  
        [[2,2,4],[2,4,6,8],[2,4,2,6,2,6]] 

- 解析层面看是下面这样的:
    
    ::
        
        [   expression  |   (param <- param-set)  1*(,param <- param-set) ]
